version: 2.1
orbs:
  # For using Heroku CLI commands
  heroku: circleci/heroku@1.2.6
jobs:
  pytest-and-flake:
    docker:
      - image: cimg/python:3.9.1
      - image: cimg/postgres:14.1
        environment:
          DB_USER: $DB_USER
          DB_PASSWORD: $DB_PASSWORD
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      - run: psql --version
      - run: |
         psql -h localhost -U postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
         psql -h localhost -U postgres -c "CREATE DATABASE $DB_NAME;"
         psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
         psql -h localhost -U postgres -c "ALTER USER $DB_USER CREATEDB;"
      - run:
         name: check TEST environment variable
         command: echo $DB_TEST
      - run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - run:
         name: flake8 checker
         command: flake8 ./ --output-file test-reports.txt
      - run:
         name: running migrations
         command: python manage.py migrate
      - run:
         name: run tests
         command: pytest -s
      # build and push Docker image
      #TAG=0.1.$CIRCLE_BUILD_NUM
      #docker login -u $DOCKER_USER -p $DOCKER_PASS
      #docker-compose build --pull
      #docker-compose run web python manage.py migrate
      #docker-compose push
      #docker logout
      #TAG=0.1.$CIRCLE_BUILD_NUM
      #docker login -u $DOCKER_USER -p $DOCKER_PASS
      #docker build -t $DOCKER_REPO:$TAG .
      #docker push $DOCKER_REPO:$TAG
      #docker logout
#      docker login -u $DOCKER_USER -p $DOCKER_PASS
#      docker-compose up --build -d
#      docker-compose push
#      docker logout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: init env
          command: |
            ls -a
            echo -e "SECRET_KEY=$SECRET_KE \nDB_NAME=$DB_NAME \nDB_USER=$DB_USER \nDB_PASSWORD=$DB_PASSWORD \nDB_HOST=db \nDB_PORT=$DB_PORT \nTAG=0.1.$CIRCLE_BUILD_NUM" >> .env
            ls -a
      - run:
          name: Start all services declared in docker-compose.yml
          command: docker-compose up -d --build
      - run:
          name: docker stat
          command: docker-compose ps
      - run:
          name: docker container
          command: docker ps
      - run:
          name: start db
          command: docker-compose start db
      - run:
          name: migrate
          command: |
            docker-compose run web python manage.py makemigrations
            docker-compose run web python manage.py migrate
      - run:
          name: docker images
          command: docker images
      - run:
          name: docker container
          command: docker ps
      - run:
          name: run server
          command: docker-compose up -d
      # Deploy to Heroku
      - heroku/install
      - run: heroku container:login
      - run: heroku container:release web -app $HEROKU_APP_NAME
#      - heroku/push-docker-image:
#          process-types: web
#      - heroku/release-docker-image:
#          process-types: web
      #- heroku/push-docker-image:
          #process-types: db
      #- heroku/release-docker-image:
          #process-types: db

#      - run:
#          name: run server
#          command: docker-compose run web python manage.py runserver 0.0.0.0:8000
#      - run:
#          name: push
#          command: |
#            docker login -u $DOCKER_USER -p $DOCKER_PASS
#            docker-compose push


#            docker-compose exec db bash -c "PGPASSWORD=$DB_PASSWORD psql -U $DB_USER -d $DB_NAME"
#      - run:
#          name: push
#          command: |
#            docker login -u $DOCKER_USER -p $DOCKER_PASS
#            docker-compose push
#      - run:
#          name: bash
#          command: |
#            docker-compose exec db bash -c "PGPASSWORD=$DB_PASSWORD psql -U $DB_USER -d $DB_NAME
#            && INSERT INTO auth_user VALUES(1,'pbkdf2_sha256$320000$dky0CMjlTTCDrkfTNquObG$JJSwBVo2Z/7k5mfkAEmZw2xIIWDWDoJ/5EBZ0EXD+CU=','2022-05-05 10:02:12.554321',TRUE,'admin','', '','admin@email.com',TRUE,TRUE,'2020-06-14 09:41:15.326411');
#            && \q"


#            INSERT INTO auth_user VALUES(1,'pbkdf2_sha256$320000$dky0CMjlTTCDrkfTNquObG$JJSwBVo2Z/7k5mfkAEmZw2xIIWDWDoJ/5EBZ0EXD+CU=','2022-05-05 10:02:12.554321',TRUE,'admin','', '','admin@email.com',TRUE,TRUE,'2020-06-14 09:41:15.326411');
#            \q
#            INSERT INTO auth_user VALUES(2,'pbkdf2_sha256$180000$8ZKjEEdeYubZ$jq4T/Vaa2DWdAvzNys4ynNO6Wd/PsWe3dux20F7BGgQ=',NULL,FALSE,'4meRomance','John','Rodriguez','coemperor@famemma.net',FALSE,TRUE,'2020-06-14 09:44:05');
#            INSERT INTO auth_user VALUES(3,'pbkdf2_sha256$180000$DdNkE39rolFF$nGmWZanXv4GlcTxtfUgc+MUIqBgDszAtvFfuFu538LQ=',NULL,FALSE,'AirWow','Ada','Paul','flocation.vam4@glendenningflowerdesign.com',FALSE,TRUE,'2020-06-14 09:44:45');
#            INSERT INTO auth_user VALUES(4,'pbkdf2_sha256$180000$3VJdHtu39cbD$8qNVkvJ0KddsvfFueEm09Sg0LxgFievigmtAEb39paE=',NULL,FALSE,'DavWin','Cassandra','Grahm','5houssam.kessaiso@facpidif.ml',FALSE,TRUE,'2020-06-14 09:46:28');
#            INSERT INTO auth_user VALUES(5,'pbkdf2_sha256$180000$zjnQu4LiqMAT$Qxom08ahzw11iPlX6kYyySa94yJXdjrptta6Qzx8HWE=',NULL,FALSE,'HeadlinesGazer','Jamie','Lal','jssssss33@acee9.live',FALSE,TRUE,'2020-06-14 09:47:21');
#            INSERT INTO lettings_address VALUES(1,7217,'Bedford Street','Brunswick','GA',31525,'USA');
#            INSERT INTO lettings_address VALUES(2,4,'Military Street','Willoughby','OH',44094,'USA');
#            INSERT INTO lettings_address VALUES(3,340,'Wintergreen Avenue','Newport News','VA',23601,'USA');
#            INSERT INTO lettings_address VALUES(4,9230,'E. Joy Ridge Street','Marquette','MI',49855,'USA');
#            INSERT INTO lettings_address VALUES(5,9606,'Harvard Street','Aliquippa','PA',15001,'USA');
#            INSERT INTO lettings_address VALUES(6,588,'Argyle Avenue','East Meadow','NY',11554,'USA');
#            INSERT INTO lettings_letting VALUES(1,'Joshua Tree Green Haus /w Hot Tub',1);
#            INSERT INTO lettings_letting VALUES(2,'Oceanview Retreat',2);
#            INSERT INTO lettings_letting VALUES(3,'''Silo Studio'' Cottage',3);
#            INSERT INTO lettings_letting VALUES(4,'Pirates of the Caribbean Getaway',4);
#            INSERT INTO lettings_letting VALUES(5,'The Mushroom Dome Retreat & LAND of Paradise Suite',5);
#            INSERT INTO lettings_letting VALUES(6,'Underground Hygge',6);
#            INSERT INTO profiles_profile VALUES(1,'Buenos Aires',5);
#            INSERT INTO profiles_profile VALUES(2,'Barcelona',4);
#            INSERT INTO profiles_profile VALUES(3,'Budapest',3);
#            INSERT INTO profiles_profile VALUES(4,'Berlin',2);
#            \q


#docker-compose exec -it db psql -U $DB_USER -W $DB_NAME
#      - run:
#          name: push
#          command: |
#            docker login -u $DOCKER_USER -p $DOCKER_PASS
#            docker-compose push


#docker exec -it web psql -h localhost -U $DB_USER $DB_NAME -c "-i pathof_mysqlfile.sql"
#      - run:
#          name: Start app
#          command: docker-compose up

#      - run:
#          name: init db
#          command: |
#            docker exec -it ocl-web psql -h localhost -U postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
#            docker exec -it ocl-web psql -h localhost -U postgres -c "CREATE DATABASE $DB_NAME;"
#            docker exec -it ocl-web psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

workflows:
  build-and-test-workflow:
    jobs:
      - pytest-and-flake