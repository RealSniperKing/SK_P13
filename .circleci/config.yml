version: 2.1
orbs:
  # For using Heroku CLI commands
  heroku: circleci/heroku@1.2.6
jobs:
  pytest-and-flake:
    docker:
      - image: cimg/python:3.10.5
      - image: cimg/postgres:12.11
        environment:
          DB_USER: $DB_USER
          DB_PASSWORD: $DB_PASSWORD
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client
      - run: psql --version
      - run: |
         psql -h localhost -U postgres -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
         psql -h localhost -U postgres -c "CREATE DATABASE $DB_NAME;"
         psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
         psql -h localhost -U postgres -c "ALTER USER $DB_USER CREATEDB;"
      - run:
         name: check TEST environment variable
         command: echo $DB_TEST
      - run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - run:
         name: flake8 checker
         command: flake8
      #./ --output-file test-reports.txt
      - run:
         name: running migrations
         command: python manage.py migrate
      - run: |
          psql -h localhost -U $DB_USER $DB_NAME -c "\i database/init.sql;"
      - run:
         name: run tests
         command: pytest -s
      # build and push Docker image
      #TAG=0.1.$CIRCLE_BUILD_NUM
      #docker login -u $DOCKER_USER -p $DOCKER_PASS
      #docker-compose build --pull
      #docker-compose run web python manage.py migrate
      #docker-compose push
      #docker logout
      #TAG=0.1.$CIRCLE_BUILD_NUM
      #docker login -u $DOCKER_USER -p $DOCKER_PASS
      #docker build -t $DOCKER_REPO:$TAG .
      #docker push $DOCKER_REPO:$TAG
      #docker logout
#      docker login -u $DOCKER_USER -p $DOCKER_PASS
#      docker-compose up --build -d
#      docker-compose push
#      docker logout
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run: echo "I am on main"
            - setup_remote_docker:
                version: 20.10.14
            # Create .env file
            - run:
                name: init env
                command: |
                  ls -a
                  echo -e "SECRET_KEY=$SECRET_KE \nDB_NAME=$DB_NAME \nDB_USER=$DB_USER \nDB_PASSWORD=$DB_PASSWORD \nDB_HOST=db \nDB_PORT=$DB_PORT \nTAG=0.1.$CIRCLE_BUILD_NUM" >> .env
                  ls -a
            # Docker compose
            - run:
                name: Start all services declared in docker-compose.yml
                command: docker-compose up -d --build
            - run:
                name: docker stat
                command: docker-compose ps
            - run:
                name: docker container
                command: docker ps
            - run:
                name: start db
                command: docker-compose start db
            - run:
                name: migrate
                command: |
                  docker-compose run web python manage.py makemigrations
                  docker-compose run web python manage.py migrate
            - run:
                name: docker images
                command: docker images
            - run:
                name: docker container
                command: docker ps
            - run:
                name: run server
                command: docker-compose up -d
            - run:
                name: export to dockerhub
                command: |
                  docker login -u $DOCKER_USER -p $DOCKER_PASS
                  docker push $DOCKER_REPO:$TAG
                  docker logout

            # Deploy to Heroku
            - heroku/install
            - run: heroku container:login
            - run: heroku container:push web -a $HEROKU_APP_NAME
            - run: heroku container:release web -a $HEROKU_APP_NAME
            - run: heroku pg:reset DATABASE -a $HEROKU_APP_NAME --confirm $HEROKU_APP_NAME
            - run: PGUSER=$DB_USER PGPASSWORD=$DB_PASSWORD heroku pg:push postgres://localhost/$DB_NAME $HEROKU_BD_NAME -a $HEROKU_APP_NAME
#      - heroku/push-docker-image:
#          process-types: web
#      - heroku/release-docker-image:
#          process-types: web
      #- heroku/push-docker-image:
          #process-types: db
      #- heroku/release-docker-image:
          #process-types: db

workflows:
  build-and-test-workflow:
    jobs:
      - pytest-and-flake